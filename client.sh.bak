#!/bin/bash
# Check parameters
if [ $# -eq 0 ]; then
	echo "Error: no paramter"
	exit 1
elif [ $# -gt 1 ]; then
	echo "Error: too many parameters"
	exit 1
fi

client_id=$1
client_pipe="${client_id}.pipe"
if [ ! -e $client_pipe ]; then
	mkfifo $client_pipe
fi
server_pipe="server.pipe"
while true; do
	# read command into an array
	read -a command_arr
	# get the first parameter
	req_command=${command_arr[0]}
	# remove the first element which is the command, so the rest of array would be parameters
	unset 'command_arr[0]'
	argcnt=$(( ${#command_arr[@]} ))
	case "${req_command}" in
		create_database)
			if [ $argcnt -eq 0 ]; then
			        echo "Error: no paramter"
				continue
			elif [ $argcnt -gt 1 ]; then
       				echo "Error: too many parameters"
				continue
			fi
			;;
		create_table)
			if [ $argcnt -lt 3 ]; then
				echo "Error: parameters problem"
				continue
			elif [ $argcnt -gt 3 ]; then
				echo "Error: too many parameters"
				continue
			fi
			;;
		insert)
			if [ $argcnt -lt 3 ]; then
				echo "Error: paramters problem"
				continue
			elif [ $argcnt -gt 3 ]; then
        			echo "Error: too many parameters"
				continue
			fi
			;; 
		select)
			if [ $argcnt -le 1 ]; then
				echo "Error: paramters problem"
				continue
			elif [ $argcnt -gt 3 ]; then
        			echo "Error: too many parameters"
				continue
			fi
			;; 
		shutdown)
			# everything is fine
			;;
	 	*)
			echo "Error: bad request"
			exit 1
	esac
	message="${req_command} $client_id ${command_arr[@]}"
	echo "[SEND]$message"
	echo $message > $server_pipe
	echo "[SENT]$message"
	start_flag=false
	sleep 1
	read response < $client_pipe
	if [ "$response" = "start_result" ]; then

	while true; do
		echo "[DEBUG] into while loop.... start_flag=$start_flag, read from $client_pipe"
		read response < $client_pipe
		echo "[RESPONSE]:$response"
		#if [ "$response" = "start_result" ]; then
		#	start_flag=true	
		#	continue
		#el
		if [ "$response" = "end_result" ]; then
		#	start_flag=false
			echo "[DEBUG] end of result, break now"
			break
		fi

		echo $response
		#echo "[DEBUG] start_flag=$start_flag"
		# if not select response, then finish reading
		#if [ ! $start_flag ]; then
		#	echo "[DEBUG] normal response, break now"
		#	break
		#fi
	done

	else
		echo $response
	fi
	
	echo "[DEBUG] end outer loop!!!"
done
